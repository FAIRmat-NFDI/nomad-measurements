{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the NOMAD-measurements Plugin Documentation \u00b6 Welcome to the official documentation for the NOMAD-measurements Plugin ! This plugin is designed to provide structured data schemas for storing experimental measurement data in alignment with the FAIR (Findable, Accessible, Interoperable, and Reusable) principles. It serves as a community or standard plugin, offering commonly used schemas and classes/sections for measurement data that can be shared across a community. Supported Measurement Techniques \u00b6 Currently, this plugin supports the following measurement techniques: X-ray Diffraction (XRD) : Supports 1D line scans and 2D Reciprocal Space Mapping (RSM) scans. Supports automatic parsing of data for the following file formats (read more here ): Panalytical: *.xrdml Bruker: *.brml Rigaku: *.rasx UV-Vis-NIR Transmission : Supports automatic parsing of data for the following file formats (read more here ): Perkin Elmers: *.asc Quantum Design (QD) : Supports automatic parsing of measurement files and sequence files from the Quantum Design devices (as given by MultiVu). For now, ETO, ACT, ACMS, MPMS, and Resistivity modes are supported. Supported file formats: QuantumDesign: *.dat and *.seq Additional measurement techniques are actively being developed and will be included soon, including: Raman Spectroscopy X-ray Fluorescence (XRF) Stay tuned for updates as more methods become available! What You Will Find in This Documentation \u00b6 This documentation builds upon the general NOMAD documentation . Here, you will find comprehensive guides on: Using the Plugin : Step-by-step instructions on how to integrate and use the NOMAD Measurements Plugin in your NOMAD Oasis. Data Structures and Supported Methods : Detailed descriptions of the available schemas, sections, and supported measurement techniques. Contributing : Learn how you can contribute to the ongoing development of this plugin. About NOMAD \u00b6 NOMAD is an open-source data management platform tailored for materials science, designed to follow the FAIR principles. It offers a robust framework for managing and sharing materials data in a standardized and interoperable manner. To learn more about NOMAD, visit the official homepage . We hope this documentation provides all the information you need to make the most of the NOMAD Measurements Plugin. Feel free to contact us for further questions.","title":"Home"},{"location":"index.html#welcome-to-the-nomad-measurements-plugin-documentation","text":"Welcome to the official documentation for the NOMAD-measurements Plugin ! This plugin is designed to provide structured data schemas for storing experimental measurement data in alignment with the FAIR (Findable, Accessible, Interoperable, and Reusable) principles. It serves as a community or standard plugin, offering commonly used schemas and classes/sections for measurement data that can be shared across a community.","title":"Welcome to the NOMAD-measurements Plugin Documentation"},{"location":"index.html#supported-measurement-techniques","text":"Currently, this plugin supports the following measurement techniques: X-ray Diffraction (XRD) : Supports 1D line scans and 2D Reciprocal Space Mapping (RSM) scans. Supports automatic parsing of data for the following file formats (read more here ): Panalytical: *.xrdml Bruker: *.brml Rigaku: *.rasx UV-Vis-NIR Transmission : Supports automatic parsing of data for the following file formats (read more here ): Perkin Elmers: *.asc Quantum Design (QD) : Supports automatic parsing of measurement files and sequence files from the Quantum Design devices (as given by MultiVu). For now, ETO, ACT, ACMS, MPMS, and Resistivity modes are supported. Supported file formats: QuantumDesign: *.dat and *.seq Additional measurement techniques are actively being developed and will be included soon, including: Raman Spectroscopy X-ray Fluorescence (XRF) Stay tuned for updates as more methods become available!","title":"Supported Measurement Techniques"},{"location":"index.html#what-you-will-find-in-this-documentation","text":"This documentation builds upon the general NOMAD documentation . Here, you will find comprehensive guides on: Using the Plugin : Step-by-step instructions on how to integrate and use the NOMAD Measurements Plugin in your NOMAD Oasis. Data Structures and Supported Methods : Detailed descriptions of the available schemas, sections, and supported measurement techniques. Contributing : Learn how you can contribute to the ongoing development of this plugin.","title":"What You Will Find in This Documentation"},{"location":"index.html#about-nomad","text":"NOMAD is an open-source data management platform tailored for materials science, designed to follow the FAIR principles. It offers a robust framework for managing and sharing materials data in a standardized and interoperable manner. To learn more about NOMAD, visit the official homepage . We hope this documentation provides all the information you need to make the most of the NOMAD Measurements Plugin. Feel free to contact us for further questions.","title":"About NOMAD"},{"location":"contact.html","text":"NOMAD is an open source project that warmly welcomes community projects, contributions, suggestions, bug fixes, and constructive feedback. The contributors to this documentation page are part of the FAIRmat Area A - Synthesis team . You can reach us by different channels. You can send as directly an email to the main contributors list: Name E-mail Github profiles Dr. Andrea Albino andrea.albino@physik.hu-berlin.de @aalbino2 Dr. Hampus N\u00e4sstr\u00f6m hampus.naesstroem@physik.hu-berlin.de @hampusnasstrom Sarthak Kapoor, MSc. sarthak.kapoor@physik.hu-berlin.de @ka-sarthak Rubel Mozumder rubel.mozumder@physik.hu-berlin.de @RubelMozumder Dr. Jos\u00e9 Marquez josemarquez@physik.hu-berlin.de @Pepe-Marquez Dr. Sebastian Br\u00fcckner ( Coordinator ) sebastian.brueckner@physik.hu-berlin.de @budschi Alternatively, you can also: Open an issue in the Github project , and tag any of us. Join the Discord channel and ask us there directly.","title":"Contact"},{"location":"explanation/levelsofschema.html","text":"Levels of Schema \u00b6 It is important to understand the structure and relationship of different types of schemas in NOMAD. Here we break down the levels of schemas and how they interact. For detailed information, please visit the official NOMAD documentation . Types of Schemas in NOMAD \u00b6 NOMAD categorizes its schemas into multiple levels, each serving distinct purposes while ensuring consistent data organization and interoperability: Basic Architecture Sections : These define the overall structure of any entry within NOMAD, regardless of the specific data type. They provide a shared, high-level framework applicable across different use cases, ensuring that every entry adheres to a consistent format. EntryData and ArchiveSection are the two relevant classes to be mentioned here. Every entry in NOMAD must inherit from EntryData , whenever a class is only used as a subsection composed within a more general one, inheriting from ArchiveSection is enough. Base Sections : These are central to NOMAD's data model and are designed to maintain interoperability between different database entries. The base sections follow an entity-activity model tailored for materials science, capturing essential relationships between key entities like samples, instruments, processes, measurements, analyses, experiments, and simulations. The goal is to provide standardized structures for data representation. Note Base sections in NOMAD are abstract and should not be instantiated directly. Instead, users must implement these sections in their own schemas (referred to as user schemas) by inheriting from a base section and nomad.datamodel.EntryData . Users are strongly encouraged to use the most specialized section available for their use case. User Schemas : These schemas are developed by users and are specific to a lab, method, or instrument. They build upon the base sections, tailoring them to meet specific research needs. In this level, users can define more specialized structures that directly reflect the specific characteristics of their experiments or simulations. Community/Standard Plugins : FAIRmat offers standardized schemas for common methods, processes, and instruments that are generalized and not tied to any specific lab or setup. These schemas are derived from recurring patterns identified across user schemas. Users can inherit from these standard plugins in a similar manner as the base sections, further specializing them as needed while still maintaining a consistent structure for broader community use. FAIRmat's Area A for synthesis data provides two community plugins, NOMAD Measurements and NOMAD Materials Processing. How These Schemas Relate to Each Other \u00b6 The relationships between these schema levels can be visualized as a layered model: Base Sections : At the core, ensuring interoperability and defining the primary structures. Community/Standard Plugins : Inherit and specialize the base sections and provide generalized versions of common user schemas, making them broadly applicable across the community while still allowing further specialization. User Schemas : Inherit and specialize a Community/Standard Plugins, if available, or the base sections according to specific requirements. Encouraged Usage \u00b6 NOMAD encourages users to first explore the available community/standard plugins and base sections before developing their own schemas. By doing so, they can maximize interoperability and benefit from established structures, while still retaining the flexibility to adapt the schema to their unique needs. In summary, the schema architecture in NOMAD is designed to support both specialized research needs and broader community use through a structured, layered approach that balances standardization with flexibility. The figure below illustrates these schema levels and the recommended workflow for schema development within NOMAD. In next documentation sections, an overview of the available methods will be provided.","title":"Levels of Schema"},{"location":"explanation/levelsofschema.html#levels-of-schema","text":"It is important to understand the structure and relationship of different types of schemas in NOMAD. Here we break down the levels of schemas and how they interact. For detailed information, please visit the official NOMAD documentation .","title":"Levels of Schema"},{"location":"explanation/levelsofschema.html#types-of-schemas-in-nomad","text":"NOMAD categorizes its schemas into multiple levels, each serving distinct purposes while ensuring consistent data organization and interoperability: Basic Architecture Sections : These define the overall structure of any entry within NOMAD, regardless of the specific data type. They provide a shared, high-level framework applicable across different use cases, ensuring that every entry adheres to a consistent format. EntryData and ArchiveSection are the two relevant classes to be mentioned here. Every entry in NOMAD must inherit from EntryData , whenever a class is only used as a subsection composed within a more general one, inheriting from ArchiveSection is enough. Base Sections : These are central to NOMAD's data model and are designed to maintain interoperability between different database entries. The base sections follow an entity-activity model tailored for materials science, capturing essential relationships between key entities like samples, instruments, processes, measurements, analyses, experiments, and simulations. The goal is to provide standardized structures for data representation. Note Base sections in NOMAD are abstract and should not be instantiated directly. Instead, users must implement these sections in their own schemas (referred to as user schemas) by inheriting from a base section and nomad.datamodel.EntryData . Users are strongly encouraged to use the most specialized section available for their use case. User Schemas : These schemas are developed by users and are specific to a lab, method, or instrument. They build upon the base sections, tailoring them to meet specific research needs. In this level, users can define more specialized structures that directly reflect the specific characteristics of their experiments or simulations. Community/Standard Plugins : FAIRmat offers standardized schemas for common methods, processes, and instruments that are generalized and not tied to any specific lab or setup. These schemas are derived from recurring patterns identified across user schemas. Users can inherit from these standard plugins in a similar manner as the base sections, further specializing them as needed while still maintaining a consistent structure for broader community use. FAIRmat's Area A for synthesis data provides two community plugins, NOMAD Measurements and NOMAD Materials Processing.","title":"Types of Schemas in NOMAD"},{"location":"explanation/levelsofschema.html#how-these-schemas-relate-to-each-other","text":"The relationships between these schema levels can be visualized as a layered model: Base Sections : At the core, ensuring interoperability and defining the primary structures. Community/Standard Plugins : Inherit and specialize the base sections and provide generalized versions of common user schemas, making them broadly applicable across the community while still allowing further specialization. User Schemas : Inherit and specialize a Community/Standard Plugins, if available, or the base sections according to specific requirements.","title":"How These Schemas Relate to Each Other"},{"location":"explanation/levelsofschema.html#encouraged-usage","text":"NOMAD encourages users to first explore the available community/standard plugins and base sections before developing their own schemas. By doing so, they can maximize interoperability and benefit from established structures, while still retaining the flexibility to adapt the schema to their unique needs. In summary, the schema architecture in NOMAD is designed to support both specialized research needs and broader community use through a structured, layered approach that balances standardization with flexibility. The figure below illustrates these schema levels and the recommended workflow for schema development within NOMAD. In next documentation sections, an overview of the available methods will be provided.","title":"Encouraged Usage"},{"location":"explanation/schemas.html","text":"NOMAD-measurements: a Community plugin \u00b6 The NOMAD-measurements plugin contains schemas for different measurement methods. An overview of the package structure is shown below. Technical description \u00b6 There are some technical aspects to understand the Python package built for this plugin, they are not crucial for the data model understanding itself: It is structured according to the src layout . It is a regular Python package , i. e., the structure is defined by the presence of __init__.py files. Each of these files contains one or multiple entry points . These are used to load a portion of the code within your NOMAD through a specific section in the nomad.yaml file. It is pip installable. The project.toml file defines what will be installed, the dependencies, further details. The entry points included are listed in this file. nomad-measurements/ \u251c\u2500\u2500 docs \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 nomad_measurements \u2502 \u251c\u2500\u2500 general.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 utils.py \u2502 \u251c\u2500\u2500 xrd \u2502 | \u251c\u2500\u2500 __init__.py \u2502 | \u251c\u2500\u2500 parser.py \u2502 | \u2514\u2500\u2500 schema.py | \u2514\u2500\u2500 transmission \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 parser.py \u2502 \u2514\u2500\u2500 schema.py \u2514\u2500\u2500 tests Data model description \u00b6 Each method has a dedicated module , i. e., a python file. General \u00b6 nomad_measurements.general module contains NOMADMeasurementsCategory which is a category section that can be used to club together the entry sections of nomad_measurements . A key benefit of using category is that all entry sections appear under the one label in the drop-down menu of Create new entry from schema dialog in NOMAD Oasis. If you want extend one of our entry sections with your specifications, and want to add it under the same category, add this category section in the m_def of the extended section. Here's an example code snippet: from nomad.metainfo import Section from nomad_measurements.general import NOMADMeasurementsCategory from nomad_measurements.xrd.schema import ELNXRayDiffraction class MyELNXRayDiffraction ( ELNXRayDiffraction ): m_def = Section ( categories = [ NOMADMeasurementsCategory ], ) # ... your specifications The general module also contains ActivityReference and ProcessReference sections. ActivityReference can be used in your schemas to make references to the Measurement entries. It allows to search an existing entry based on its lab_id , which is an inherited quantity in all Measurement sections, and automatically make a reference to it. X-Ray Diffraction \u00b6 nomad_measurements.xrd.schema module provides data models for X-Ray diffraction (XRD). These sections can be used to model the metadata related to the setting and results of the measurement. In addition to data modeling section, the module contains an ELN (stands for Electronic Lab Notebook) section, which can be used to create an NOMAD entry for XRD measurement and populate the data directly from the files coming from the instrument. The section also provides methods to generate plots for XRD patterns. In this documentation, we go over some of the important sections of this module. Alternatively, you can access all the section definitions by using the metainfo browser and searching for: \"nomad_measurements.xrd\" XRayDiffraction \u00b6 nomad_measurements.xrd.schema.XRayDiffraction section extends Measurement base section and describes the settings and results of XRD measurement. This is achieved by composing XRDSettings and XRDResult sections as sub-sections. class XRayDiffraction ( Measurement ): diffraction_method_name : str xrd_settings : XRDSettings results : list [ XRDResult ] Once the section is populated, diffraction pattern is indexed under properties.structural field of entry's results section, making it searchable in NOMAD. XRDResult \u00b6 nomad_measurements.xrd.schema.XRDResult section describes results coming from XRD measurement. These include intensity, two theta, omega, phi, norm of q-vector, scan axis, and integration time. Their descriptions can be found here in the metainfo browser . The module also contains extension of this section, specifically XRDResult1D and XRDResultRSM . XRDResult1D provides generate_plots method which uses the results to generate intensity-vs-two-theta and intensity-vs-q-norm plots for line scans. XRDResultRSM extends the data model to describe reciprocal space maps, or RSM. It redefines shape of intensity to be 2D array and adds two new quantities: q_parallel and q_perpedicular , each being a 2D array. Together, these can be used to describe intensity values in a 2D reciprocal space. The section also provides generate_plots method to generate 2D surface plot for intensity-vs-two-theta-omega and intensity-vs-q-vectors. We also have HDF5 versions of these result sections that make use of HDF5Reference quantities: XRDResult1DHDF5 and XRDResultRSMHDF5 . More about them here . XRDSettings \u00b6 nomad_measurements.xrd.schema.XRDSettings section defines the settings related to the X-ray source. It composes XRDTubeSource section which describes tube material, current , voltage, k \u03b1 1 , k \u03b1 2 , k \u03b2 , and k \u03b1 1 / k \u03b1 2 ELNXRayDiffraction \u00b6 nomad_measurements.xrd.schema.ELNXRayDiffraction section allows to use XRayDiffraction as an entry section, which can be used to create NOMAD entries . The quantity data_file can be used to upload a measurement file coming from the instrument. The section uses readers defined in fairmat-readers-xrd package to extract data from the file and populate the XRayDiffraction schema. Currently, the the reader package supports reading .brml , .xrdml , and .rasx files. Please check the package's documentation for an up-to-date list of the supported file types. It also inherits the PlotSection , which allows to display Plotly figures of the XRD pattern in the NOMAD Oasis. The plots are generated using the generate_plots methods of XRDResult sections. Transmission Spectrophotometry \u00b6 nomad_measurements.transmission.schema provides NOMAD schemas for modeling data and metadata from transmission spectrophotometry. Currently, schemas specific to UV-Vis-NIR transmission are available. The module follows a class structure similar to the xrd module . The UVVisNirTransmission class can be composed using sub-sections for results and settings. ELNUVVisNirTransmission inherits UVVisNirTransmission and can be used to create NOMAD entries for the measurement. In addition, the module provides classes for modeling the instrument and its components: Spectrophotometer , Detector , LightSource , and Monochromator . These can be used to model data related to the instrument in a separate entry that can be referenced in the measurement entry under the instruments sub-section. As the instrument settings are measurement-specific, they should be modeled in the measurement entry under the transmission_settings sub-section. When a measurement file of a supported file type is added to a NOMAD upload, an ELNUVVisNirTransmission entry will be generated and populated with data from the file. If the instrument serial number is available in the file, an existing instrument entry containing the same serial number is automatically referenced in the measurement entry. ELNUVVisNirTransmission uses readers defined in fairmat-readers-transmission package to extract data from the file and populate the schema. Currently, the reader package supports reading .asc files generated by Perkin Elmer UV WinLab software. Please check the package's documentation for an up-to-date list of the supported file types. You can access all the section definitions by using the metainfo browser and searching for: \"nomad_measurements.transmission\" . HDF5 References \u00b6 We make use of HDF5Reference as a quantity type in some schemas. These quantities allow to store large datasets in an external .h5 file, while only storing references to the HDF5 datasets in the NOMAD entry. As a result, the users can connect large datasets to ELN entries without sacrificing their responsiveness. HDF5 References in X-Ray Diffraction ELNs \u00b6 In our ELN schemas for XRD, we allow the user to switch between result sections using HDF5Reference . The user can switch between an HDF5 or a non-HDF5 result section by clicking the button Switch To/From HDF5 Results . When the result section is switched to an HDF5 one, a NeXus file is generated (which is a .h5 file with additional validations) and results are written there. The entry only stores the references to these HDF5 datasets in the NeXus file. The same button can be used to switch back to a non-HDF5 result section if needed. An oasis administrator can also set in the nomad.yaml whether to use the HDF5 or non-HDF5 result section when parsing XRD data in the entry for the first time. Users who usually work with RSM or high-resolution XRD scans can opt-in to this. Otherwise, the parsed entries use a non-HDF5 result section by default. # \"nomad.yaml\" file for your oasis plugins : entry_points : options : nomad_measurements.xrd:schema : use_hdf5_results : true # defaults to `false` when not specified Working with downloaded entries \u00b6 If the entries using HDF5 result sections are downloaded over the API, accessing the data of the quantity requires an additional step. The entry only stores a reference path ( str ) to the data. Make use of the util function nomad_measurements.utils.resolve_hdf5_reference to resolve these paths. from nomad.client import ArchiveQuery from nomad_measurements.utils import resolve_hdf5_reference aq = ArchiveQuery ( query = { 'entry_id:any' : [ '<Entry ID of an XRD entry>' ]}, url = 'http://nomad-lab.eu/prod/v1/oasis/api' , ) xrd = aq . download ()[ 0 ] . data print ( xrd . results [ 0 ] . intensity ) print ( xrd . results [ 0 ] . two_theta ) # \"/uploads/<upload_id>/raw/xrd_example.nxs#/entry/experiment_result/intensity\" # \"/uploads/<upload_id>/raw/xrd_example.nxs#/entry/experiment_result/intensity\" intensity , two_theta = resolve_hdf5_reference ( reference = [ xrd . results [ 0 ] . intensity , xrd . results [ 0 ] . two_theta , ], archive = xrd , ) # resolves the references and returns the XRD data","title":"Schemas"},{"location":"explanation/schemas.html#nomad-measurements-a-community-plugin","text":"The NOMAD-measurements plugin contains schemas for different measurement methods. An overview of the package structure is shown below.","title":"NOMAD-measurements: a Community plugin"},{"location":"explanation/schemas.html#technical-description","text":"There are some technical aspects to understand the Python package built for this plugin, they are not crucial for the data model understanding itself: It is structured according to the src layout . It is a regular Python package , i. e., the structure is defined by the presence of __init__.py files. Each of these files contains one or multiple entry points . These are used to load a portion of the code within your NOMAD through a specific section in the nomad.yaml file. It is pip installable. The project.toml file defines what will be installed, the dependencies, further details. The entry points included are listed in this file. nomad-measurements/ \u251c\u2500\u2500 docs \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 nomad_measurements \u2502 \u251c\u2500\u2500 general.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 utils.py \u2502 \u251c\u2500\u2500 xrd \u2502 | \u251c\u2500\u2500 __init__.py \u2502 | \u251c\u2500\u2500 parser.py \u2502 | \u2514\u2500\u2500 schema.py | \u2514\u2500\u2500 transmission \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 parser.py \u2502 \u2514\u2500\u2500 schema.py \u2514\u2500\u2500 tests","title":"Technical description"},{"location":"explanation/schemas.html#data-model-description","text":"Each method has a dedicated module , i. e., a python file.","title":"Data model description"},{"location":"explanation/schemas.html#general","text":"nomad_measurements.general module contains NOMADMeasurementsCategory which is a category section that can be used to club together the entry sections of nomad_measurements . A key benefit of using category is that all entry sections appear under the one label in the drop-down menu of Create new entry from schema dialog in NOMAD Oasis. If you want extend one of our entry sections with your specifications, and want to add it under the same category, add this category section in the m_def of the extended section. Here's an example code snippet: from nomad.metainfo import Section from nomad_measurements.general import NOMADMeasurementsCategory from nomad_measurements.xrd.schema import ELNXRayDiffraction class MyELNXRayDiffraction ( ELNXRayDiffraction ): m_def = Section ( categories = [ NOMADMeasurementsCategory ], ) # ... your specifications The general module also contains ActivityReference and ProcessReference sections. ActivityReference can be used in your schemas to make references to the Measurement entries. It allows to search an existing entry based on its lab_id , which is an inherited quantity in all Measurement sections, and automatically make a reference to it.","title":"General"},{"location":"explanation/schemas.html#x-ray-diffraction","text":"nomad_measurements.xrd.schema module provides data models for X-Ray diffraction (XRD). These sections can be used to model the metadata related to the setting and results of the measurement. In addition to data modeling section, the module contains an ELN (stands for Electronic Lab Notebook) section, which can be used to create an NOMAD entry for XRD measurement and populate the data directly from the files coming from the instrument. The section also provides methods to generate plots for XRD patterns. In this documentation, we go over some of the important sections of this module. Alternatively, you can access all the section definitions by using the metainfo browser and searching for: \"nomad_measurements.xrd\"","title":"X-Ray Diffraction"},{"location":"explanation/schemas.html#xraydiffraction","text":"nomad_measurements.xrd.schema.XRayDiffraction section extends Measurement base section and describes the settings and results of XRD measurement. This is achieved by composing XRDSettings and XRDResult sections as sub-sections. class XRayDiffraction ( Measurement ): diffraction_method_name : str xrd_settings : XRDSettings results : list [ XRDResult ] Once the section is populated, diffraction pattern is indexed under properties.structural field of entry's results section, making it searchable in NOMAD.","title":"XRayDiffraction"},{"location":"explanation/schemas.html#xrdresult","text":"nomad_measurements.xrd.schema.XRDResult section describes results coming from XRD measurement. These include intensity, two theta, omega, phi, norm of q-vector, scan axis, and integration time. Their descriptions can be found here in the metainfo browser . The module also contains extension of this section, specifically XRDResult1D and XRDResultRSM . XRDResult1D provides generate_plots method which uses the results to generate intensity-vs-two-theta and intensity-vs-q-norm plots for line scans. XRDResultRSM extends the data model to describe reciprocal space maps, or RSM. It redefines shape of intensity to be 2D array and adds two new quantities: q_parallel and q_perpedicular , each being a 2D array. Together, these can be used to describe intensity values in a 2D reciprocal space. The section also provides generate_plots method to generate 2D surface plot for intensity-vs-two-theta-omega and intensity-vs-q-vectors. We also have HDF5 versions of these result sections that make use of HDF5Reference quantities: XRDResult1DHDF5 and XRDResultRSMHDF5 . More about them here .","title":"XRDResult"},{"location":"explanation/schemas.html#xrdsettings","text":"nomad_measurements.xrd.schema.XRDSettings section defines the settings related to the X-ray source. It composes XRDTubeSource section which describes tube material, current , voltage, k \u03b1 1 , k \u03b1 2 , k \u03b2 , and k \u03b1 1 / k \u03b1 2","title":"XRDSettings"},{"location":"explanation/schemas.html#elnxraydiffraction","text":"nomad_measurements.xrd.schema.ELNXRayDiffraction section allows to use XRayDiffraction as an entry section, which can be used to create NOMAD entries . The quantity data_file can be used to upload a measurement file coming from the instrument. The section uses readers defined in fairmat-readers-xrd package to extract data from the file and populate the XRayDiffraction schema. Currently, the the reader package supports reading .brml , .xrdml , and .rasx files. Please check the package's documentation for an up-to-date list of the supported file types. It also inherits the PlotSection , which allows to display Plotly figures of the XRD pattern in the NOMAD Oasis. The plots are generated using the generate_plots methods of XRDResult sections.","title":"ELNXRayDiffraction"},{"location":"explanation/schemas.html#transmission-spectrophotometry","text":"nomad_measurements.transmission.schema provides NOMAD schemas for modeling data and metadata from transmission spectrophotometry. Currently, schemas specific to UV-Vis-NIR transmission are available. The module follows a class structure similar to the xrd module . The UVVisNirTransmission class can be composed using sub-sections for results and settings. ELNUVVisNirTransmission inherits UVVisNirTransmission and can be used to create NOMAD entries for the measurement. In addition, the module provides classes for modeling the instrument and its components: Spectrophotometer , Detector , LightSource , and Monochromator . These can be used to model data related to the instrument in a separate entry that can be referenced in the measurement entry under the instruments sub-section. As the instrument settings are measurement-specific, they should be modeled in the measurement entry under the transmission_settings sub-section. When a measurement file of a supported file type is added to a NOMAD upload, an ELNUVVisNirTransmission entry will be generated and populated with data from the file. If the instrument serial number is available in the file, an existing instrument entry containing the same serial number is automatically referenced in the measurement entry. ELNUVVisNirTransmission uses readers defined in fairmat-readers-transmission package to extract data from the file and populate the schema. Currently, the reader package supports reading .asc files generated by Perkin Elmer UV WinLab software. Please check the package's documentation for an up-to-date list of the supported file types. You can access all the section definitions by using the metainfo browser and searching for: \"nomad_measurements.transmission\" .","title":"Transmission Spectrophotometry"},{"location":"explanation/schemas.html#hdf5-references","text":"We make use of HDF5Reference as a quantity type in some schemas. These quantities allow to store large datasets in an external .h5 file, while only storing references to the HDF5 datasets in the NOMAD entry. As a result, the users can connect large datasets to ELN entries without sacrificing their responsiveness.","title":"HDF5 References"},{"location":"explanation/schemas.html#hdf5-references-in-x-ray-diffraction-elns","text":"In our ELN schemas for XRD, we allow the user to switch between result sections using HDF5Reference . The user can switch between an HDF5 or a non-HDF5 result section by clicking the button Switch To/From HDF5 Results . When the result section is switched to an HDF5 one, a NeXus file is generated (which is a .h5 file with additional validations) and results are written there. The entry only stores the references to these HDF5 datasets in the NeXus file. The same button can be used to switch back to a non-HDF5 result section if needed. An oasis administrator can also set in the nomad.yaml whether to use the HDF5 or non-HDF5 result section when parsing XRD data in the entry for the first time. Users who usually work with RSM or high-resolution XRD scans can opt-in to this. Otherwise, the parsed entries use a non-HDF5 result section by default. # \"nomad.yaml\" file for your oasis plugins : entry_points : options : nomad_measurements.xrd:schema : use_hdf5_results : true # defaults to `false` when not specified","title":"HDF5 References in X-Ray Diffraction ELNs"},{"location":"explanation/schemas.html#working-with-downloaded-entries","text":"If the entries using HDF5 result sections are downloaded over the API, accessing the data of the quantity requires an additional step. The entry only stores a reference path ( str ) to the data. Make use of the util function nomad_measurements.utils.resolve_hdf5_reference to resolve these paths. from nomad.client import ArchiveQuery from nomad_measurements.utils import resolve_hdf5_reference aq = ArchiveQuery ( query = { 'entry_id:any' : [ '<Entry ID of an XRD entry>' ]}, url = 'http://nomad-lab.eu/prod/v1/oasis/api' , ) xrd = aq . download ()[ 0 ] . data print ( xrd . results [ 0 ] . intensity ) print ( xrd . results [ 0 ] . two_theta ) # \"/uploads/<upload_id>/raw/xrd_example.nxs#/entry/experiment_result/intensity\" # \"/uploads/<upload_id>/raw/xrd_example.nxs#/entry/experiment_result/intensity\" intensity , two_theta = resolve_hdf5_reference ( reference = [ xrd . results [ 0 ] . intensity , xrd . results [ 0 ] . two_theta , ], archive = xrd , ) # resolves the references and returns the XRD data","title":"Working with downloaded entries"},{"location":"how_to/develop.html","text":"How to Contribute to the NOMAD-measurements Plugin \u00b6 The NOMAD-measurements is a community-driven effort aimed at providing shared data schemas and parsers for measurement data in materials science. We encourage contributions from all users to help enhance and expand the plugin, making it more robust and broadly applicable. If you have any questions or need assistance, feel free to contact us \u2014 we\u2019re here to help you get involved! Here\u2019s how you can contribute: 1. Setting up a development environment \u00b6 To make code contributions to this package, you need to setup a local development environment. It starts with cloning this repo in a local folder. Create a fresh Python environment and install the package in editable mode (with -e flag) with its dev dependencies. pytest package is installed as a part of the dev dependencies. To run the tests locally, you can simply run pytest in the topmost folder of the repo. git clone git@github.com:FAIRmat-NFDI/nomad-measurements.git cd nomad-measurements python3.11 -m venv .pyenv source .pyenv/bin/activate pip install -e . [ dev ] --index-url https://gitlab.mpcdf.mpg.de/api/v4/projects/2187/packages/pypi/simple pytest 2. Extract General Components from Your Custom Schema \u00b6 If you have developed custom schemas for your own lab or project, consider extracting the generalizable aspects and contributing them to the community plugin. Look for data structures, methods, or components that are not specific to your setup but could benefit the wider community. By sharing these, you help build a richer, more comprehensive plugin that everyone can use. 3. Test in Your Own Plugin \u00b6 Before submitting contributions, it\u2019s important to test your changes in your own NOMAD plugin environment. This ensures that your extracted schema or code functions as expected and aligns with the overall plugin structure. Testing locally also helps identify potential conflicts or improvements before making a broader contribution. 4. Open an Issue \u00b6 If you have suggestions, questions, or encounter any issues while using or developing the plugin, feel free to open an issue on the plugin\u2019s GitHub repository. This helps maintainers and other contributors track potential improvements or areas of concern. Be as detailed as possible, providing relevant context and, if applicable, examples of the issue you're encountering. 5. Create a Pull Request \u00b6 Once you\u2019ve tested your contribution and are confident it benefits the community, create a pull request (PR). In your PR, clearly describe what changes you are proposing and why they are necessary. If you\u2019re contributing general components extracted from your custom schema, explain how they can be applied broadly across different use cases. Be sure to follow the repository's contribution guidelines and reference any related issues if applicable. By contributing to this plugin, you are helping build a more cohesive and interoperable materials science data ecosystem. We appreciate your input and collaboration!","title":"Develop this Plugin"},{"location":"how_to/develop.html#how-to-contribute-to-the-nomad-measurements-plugin","text":"The NOMAD-measurements is a community-driven effort aimed at providing shared data schemas and parsers for measurement data in materials science. We encourage contributions from all users to help enhance and expand the plugin, making it more robust and broadly applicable. If you have any questions or need assistance, feel free to contact us \u2014 we\u2019re here to help you get involved! Here\u2019s how you can contribute:","title":"How to Contribute to the NOMAD-measurements Plugin"},{"location":"how_to/develop.html#1-setting-up-a-development-environment","text":"To make code contributions to this package, you need to setup a local development environment. It starts with cloning this repo in a local folder. Create a fresh Python environment and install the package in editable mode (with -e flag) with its dev dependencies. pytest package is installed as a part of the dev dependencies. To run the tests locally, you can simply run pytest in the topmost folder of the repo. git clone git@github.com:FAIRmat-NFDI/nomad-measurements.git cd nomad-measurements python3.11 -m venv .pyenv source .pyenv/bin/activate pip install -e . [ dev ] --index-url https://gitlab.mpcdf.mpg.de/api/v4/projects/2187/packages/pypi/simple pytest","title":"1. Setting up a development environment"},{"location":"how_to/develop.html#2-extract-general-components-from-your-custom-schema","text":"If you have developed custom schemas for your own lab or project, consider extracting the generalizable aspects and contributing them to the community plugin. Look for data structures, methods, or components that are not specific to your setup but could benefit the wider community. By sharing these, you help build a richer, more comprehensive plugin that everyone can use.","title":"2. Extract General Components from Your Custom Schema"},{"location":"how_to/develop.html#3-test-in-your-own-plugin","text":"Before submitting contributions, it\u2019s important to test your changes in your own NOMAD plugin environment. This ensures that your extracted schema or code functions as expected and aligns with the overall plugin structure. Testing locally also helps identify potential conflicts or improvements before making a broader contribution.","title":"3. Test in Your Own Plugin"},{"location":"how_to/develop.html#4-open-an-issue","text":"If you have suggestions, questions, or encounter any issues while using or developing the plugin, feel free to open an issue on the plugin\u2019s GitHub repository. This helps maintainers and other contributors track potential improvements or areas of concern. Be as detailed as possible, providing relevant context and, if applicable, examples of the issue you're encountering.","title":"4. Open an Issue"},{"location":"how_to/develop.html#5-create-a-pull-request","text":"Once you\u2019ve tested your contribution and are confident it benefits the community, create a pull request (PR). In your PR, clearly describe what changes you are proposing and why they are necessary. If you\u2019re contributing general components extracted from your custom schema, explain how they can be applied broadly across different use cases. Be sure to follow the repository's contribution guidelines and reference any related issues if applicable. By contributing to this plugin, you are helping build a more cohesive and interoperable materials science data ecosystem. We appreciate your input and collaboration!","title":"5. Create a Pull Request"},{"location":"how_to/install.html","text":"How to install this plugin \u00b6 This plugin can be used in a NOMAD Oasis installation. Please visit the NOMAD documentation for details on how to setup an NOMAD Oasis . Add This Plugin to Your NOMAD Oasis installation \u00b6 Read the NOMAD plugin documentation for all details on how to deploy the plugin on your NOMAD instance. We recommend writing your own NOMAD docker image which includes the NOMAD plugins you want to deploy. Please follow these instructions to set up your own NOMAD image writing workflow. You need to modify the plugins.txt file and add the following lines: nomad-measurements This will add the latest version of the NOMAD-measurements Plugin to your NOMAD Oasis image. If you want to add a specific version of the plugin you will need to provide the specific version tag or commit sha, for example: nomad-measurements==0.1.0 or git+https://github.com/FAIRmat-NFDI/nomad-measurements.git@f19c0e3b175613ec026ef36c849af3474c42cf52 Local installation of the plugin in your Python environment \u00b6 nomad-measurements can be installed from PyPI using pip . Currently we require features in nomad-lab which are not published to PyPI. In order to install these a --index-url needs to be provided: pip install nomad-measurements --index-url https://gitlab.mpcdf.mpg.de/api/v4/projects/2187/packages/pypi/simple","title":"Install this Plugin"},{"location":"how_to/install.html#how-to-install-this-plugin","text":"This plugin can be used in a NOMAD Oasis installation. Please visit the NOMAD documentation for details on how to setup an NOMAD Oasis .","title":"How to install this plugin"},{"location":"how_to/install.html#add-this-plugin-to-your-nomad-oasis-installation","text":"Read the NOMAD plugin documentation for all details on how to deploy the plugin on your NOMAD instance. We recommend writing your own NOMAD docker image which includes the NOMAD plugins you want to deploy. Please follow these instructions to set up your own NOMAD image writing workflow. You need to modify the plugins.txt file and add the following lines: nomad-measurements This will add the latest version of the NOMAD-measurements Plugin to your NOMAD Oasis image. If you want to add a specific version of the plugin you will need to provide the specific version tag or commit sha, for example: nomad-measurements==0.1.0 or git+https://github.com/FAIRmat-NFDI/nomad-measurements.git@f19c0e3b175613ec026ef36c849af3474c42cf52","title":"Add This Plugin to Your NOMAD Oasis installation"},{"location":"how_to/install.html#local-installation-of-the-plugin-in-your-python-environment","text":"nomad-measurements can be installed from PyPI using pip . Currently we require features in nomad-lab which are not published to PyPI. In order to install these a --index-url needs to be provided: pip install nomad-measurements --index-url https://gitlab.mpcdf.mpg.de/api/v4/projects/2187/packages/pypi/simple","title":"Local installation of the plugin in your Python environment"},{"location":"how_to/use_this_plugin.html","text":"How to Use the NOMAD-measurement Plugin \u00b6 The NOMAD-measurement plugin provides standardized schemas for common characterization methods and instruments. These schemas are generalized to ensure they are not tied to any specific lab or setup, promoting interoperability across the materials science community. Users can inherit from these schemas, further specializing them to fit their specific needs, all while maintaining a consistent structure that benefits broader community use. For more details, see levels of schemas in NOMAD . To use this plugin, you must have it installed on your NOMAD Oasis instance (please refer to the installation guide for instructions). Alternatively, you can explore the plugin\u2019s functionality and make use of it on our centrally hosted Example Oasis . This guide will walk you through the different ways to use the NOMAD-measurement plugin: Without specialization : Instantiating NOMAD entries directly from the \" built-in schemas \". Inheriting and specializing : Using custom YAML schemas to adapt the existing schemas for your specific use case. Using Python schema plugins : Inheriting and specializing schemas with Python for advanced customization. Using \"Built-in Schemas\" \u00b6 In this section, we will demonstrate how to use the standard, built-in entry schemas provided by the plugin without any specialization. These schemas can be directly instantiated to create entries in a NOMAD Oasis. Start a new upload and click on the CREATE FROM SCHEMA button. Select the schema from the drop-down menu, add the name for the entry, and hit CREATE . The user can also simply drop their measurement files into the Upload folder. The plugin comes with matching parsers that can automatically parse specific file types, create corresponding measurement entry section and populate it. Let's see an example for XRD measurement file of file type .xrdml coming from Panalytical X-ray Diffractometer. You can also download this file and perform the following steps. Info Supported measurements and file types can be found here . Start a new upload. Click on DROP FILES HERE button and select the XRD file. Or simply drag and drop the file on the button. An entry using ELNXRayDiffraction section is automatically created and populated based on the data from the measurement file. Open it by clicking on the right arrow. Inheriting and Specializing Using Custom YAML Schemas \u00b6 Here, we will guide you through how to extend and specialize the built-in schemas using custom YAML schemas. This approach allows you to tailor the schema to your specific requirements while still leveraging the standardized base provided by the plugin. Let's assume that you want to extend the XRDResult section and include the position where the X-ray impinges the sample. For this, you want to add two array quantities x_position and y_position . Based on this new result section, let's call it MyXRDResult , you want to create modified entry section MyELNXRayDiffraction . You can write a YAML schema to define these custom section. Here's an example code: definitions : name : 'XRayDiffraction customization' sections : MyXRDResult : base_sections : - nomad_measurements.xrd.schema.XRDResult quantities : x_position : type : np.float64 shape : [ '*' ] unit : meter description : \"x-coordinate of the point of X-ray incidence in sample holder coordinate system.\" y_position : type : np.float64 shape : [ '*' ] unit : meter description : \"y-coordinate of the point of X-ray incidence in sample holder coordinate system.\" MyELNXRayDiffraction : base_sections : - nomad_measurements.xrd.schema.ELNXRayDiffraction - nomad.datamodel.data.EntryData sub_sections : results : repeats : True section : '#/MyXRDResult' Save the file as <file_name>.archive.yaml (or download it from here ) and add it in your upload folder to access the custom schemas. You can learn in detail how to create your own YAML schemas in our previous tutorial 8 and tutorial 13 . You can navigate in the tutorial 8 repository to see some other examples of YAML files that inherit and extend existing classes. Inheriting and Specializing Using Python Schema Plugins \u00b6 The most customizable way of using the sections defined in the nomad-measurements plugin is to extend the sections in another NOMAD schema plugin. For a detailed tutorial on how to setup and develop a plugin we refer you to the tutorial on Developing a NOMAD Plugin . Once your plugin is setup you can include the required nomad-measurements version as a dependency in your pyproject.toml : dependencies = [ \"nomad-measurements>=1.0.0\" , ] In your schema packages you can then import the desired section definitions and specialize them to your need by adding any additional quantities or subsections that you require: from nomad_measurements.xrd.schema import ( XRayDiffraction , XRDResult , ) from nomad.metainfo import Quantity class MyXRDResult ( XRDResult ): my_additional_quantity = Quantity ( type = str , description = 'My additional string quantity` ) class MyXRayDiffraction ( XRayDiffraction ): results = SubSection ( description = \"\"\" Specialized results of my X-ray diffraction measurement. \"\"\" , section_def = MyXRDResult , repeats = True , ) By using existing subsection names (see results in the example above) you can specialize the subsections . Please keep in mind that the specialized subsection should always inherit the original one. In the example above the results subsection used to be of type XRDResult but we specialized it to MyXRDResult results but made sure that this section inherits XRDResult . By doing this we ensure the polymorphism and that we will always find results of (sub)type XRDResult in an XRayDiffraction .","title":"Use this Plugin"},{"location":"how_to/use_this_plugin.html#how-to-use-the-nomad-measurement-plugin","text":"The NOMAD-measurement plugin provides standardized schemas for common characterization methods and instruments. These schemas are generalized to ensure they are not tied to any specific lab or setup, promoting interoperability across the materials science community. Users can inherit from these schemas, further specializing them to fit their specific needs, all while maintaining a consistent structure that benefits broader community use. For more details, see levels of schemas in NOMAD . To use this plugin, you must have it installed on your NOMAD Oasis instance (please refer to the installation guide for instructions). Alternatively, you can explore the plugin\u2019s functionality and make use of it on our centrally hosted Example Oasis . This guide will walk you through the different ways to use the NOMAD-measurement plugin: Without specialization : Instantiating NOMAD entries directly from the \" built-in schemas \". Inheriting and specializing : Using custom YAML schemas to adapt the existing schemas for your specific use case. Using Python schema plugins : Inheriting and specializing schemas with Python for advanced customization.","title":"How to Use the NOMAD-measurement Plugin"},{"location":"how_to/use_this_plugin.html#using-built-in-schemas","text":"In this section, we will demonstrate how to use the standard, built-in entry schemas provided by the plugin without any specialization. These schemas can be directly instantiated to create entries in a NOMAD Oasis. Start a new upload and click on the CREATE FROM SCHEMA button. Select the schema from the drop-down menu, add the name for the entry, and hit CREATE . The user can also simply drop their measurement files into the Upload folder. The plugin comes with matching parsers that can automatically parse specific file types, create corresponding measurement entry section and populate it. Let's see an example for XRD measurement file of file type .xrdml coming from Panalytical X-ray Diffractometer. You can also download this file and perform the following steps. Info Supported measurements and file types can be found here . Start a new upload. Click on DROP FILES HERE button and select the XRD file. Or simply drag and drop the file on the button. An entry using ELNXRayDiffraction section is automatically created and populated based on the data from the measurement file. Open it by clicking on the right arrow.","title":"Using \"Built-in Schemas\""},{"location":"how_to/use_this_plugin.html#inheriting-and-specializing-using-custom-yaml-schemas","text":"Here, we will guide you through how to extend and specialize the built-in schemas using custom YAML schemas. This approach allows you to tailor the schema to your specific requirements while still leveraging the standardized base provided by the plugin. Let's assume that you want to extend the XRDResult section and include the position where the X-ray impinges the sample. For this, you want to add two array quantities x_position and y_position . Based on this new result section, let's call it MyXRDResult , you want to create modified entry section MyELNXRayDiffraction . You can write a YAML schema to define these custom section. Here's an example code: definitions : name : 'XRayDiffraction customization' sections : MyXRDResult : base_sections : - nomad_measurements.xrd.schema.XRDResult quantities : x_position : type : np.float64 shape : [ '*' ] unit : meter description : \"x-coordinate of the point of X-ray incidence in sample holder coordinate system.\" y_position : type : np.float64 shape : [ '*' ] unit : meter description : \"y-coordinate of the point of X-ray incidence in sample holder coordinate system.\" MyELNXRayDiffraction : base_sections : - nomad_measurements.xrd.schema.ELNXRayDiffraction - nomad.datamodel.data.EntryData sub_sections : results : repeats : True section : '#/MyXRDResult' Save the file as <file_name>.archive.yaml (or download it from here ) and add it in your upload folder to access the custom schemas. You can learn in detail how to create your own YAML schemas in our previous tutorial 8 and tutorial 13 . You can navigate in the tutorial 8 repository to see some other examples of YAML files that inherit and extend existing classes.","title":"Inheriting and Specializing Using Custom YAML Schemas"},{"location":"how_to/use_this_plugin.html#inheriting-and-specializing-using-python-schema-plugins","text":"The most customizable way of using the sections defined in the nomad-measurements plugin is to extend the sections in another NOMAD schema plugin. For a detailed tutorial on how to setup and develop a plugin we refer you to the tutorial on Developing a NOMAD Plugin . Once your plugin is setup you can include the required nomad-measurements version as a dependency in your pyproject.toml : dependencies = [ \"nomad-measurements>=1.0.0\" , ] In your schema packages you can then import the desired section definitions and specialize them to your need by adding any additional quantities or subsections that you require: from nomad_measurements.xrd.schema import ( XRayDiffraction , XRDResult , ) from nomad.metainfo import Quantity class MyXRDResult ( XRDResult ): my_additional_quantity = Quantity ( type = str , description = 'My additional string quantity` ) class MyXRayDiffraction ( XRayDiffraction ): results = SubSection ( description = \"\"\" Specialized results of my X-ray diffraction measurement. \"\"\" , section_def = MyXRDResult , repeats = True , ) By using existing subsection names (see results in the example above) you can specialize the subsections . Please keep in mind that the specialized subsection should always inherit the original one. In the example above the results subsection used to be of type XRDResult but we specialized it to MyXRDResult results but made sure that this section inherits XRDResult . By doing this we ensure the polymorphism and that we will always find results of (sub)type XRDResult in an XRayDiffraction .","title":"Inheriting and Specializing Using Python Schema Plugins"},{"location":"reference/references.html","text":"Technical References \u00b6 The NOMAD Metainfo Browser allows users to explore all available schemas, including their sections, values, and references, in a detailed and interactive manner. It can be accessed through the Analyze tab in any NOMAD instance. To explore the schemas specific to the NOMAD-measurement plugin, you can visit the Metainfo Browser on the Example Oasis and review all the details of the plugin's structures and components. Glossary \u00b6 subclass \u00b6 Inheritance of classes. Whenever a Python class inherits from another one, this is called subclass , meaning that it is semantically a children of the inherited one. subsection \u00b6 Composition of classes. A class can contain some subsection nested (or composed ) inside it. These classes are not related by inheritance relationship. Info Please also refer to the glossary in the NOMAD documentation to find definitions and explanations for specific technical terms used throughout the NOMAD software.","title":"References"},{"location":"reference/references.html#technical-references","text":"The NOMAD Metainfo Browser allows users to explore all available schemas, including their sections, values, and references, in a detailed and interactive manner. It can be accessed through the Analyze tab in any NOMAD instance. To explore the schemas specific to the NOMAD-measurement plugin, you can visit the Metainfo Browser on the Example Oasis and review all the details of the plugin's structures and components.","title":"Technical References"},{"location":"reference/references.html#glossary","text":"","title":"Glossary"},{"location":"reference/references.html#subclass","text":"Inheritance of classes. Whenever a Python class inherits from another one, this is called subclass , meaning that it is semantically a children of the inherited one.","title":"subclass"},{"location":"reference/references.html#subsection","text":"Composition of classes. A class can contain some subsection nested (or composed ) inside it. These classes are not related by inheritance relationship. Info Please also refer to the glossary in the NOMAD documentation to find definitions and explanations for specific technical terms used throughout the NOMAD software.","title":"subsection"},{"location":"tutorial/tutorial.html","text":"There is no specific tutorial available for the NOMAD-measurement plugin at the moment. However, to learn more about related topics, we encourage you to explore the FAIRmat Tutorial series . These tutorials cover a wide range of topics related to data management, materials processing, and the principles of the FAIR (Findable, Accessible, Interoperable, and Reusable) approach. The FAIRmat tutorials will provide you with valuable insights into how to manage and structure materials data in NOMAD and how to contribute to community efforts like this plugin. Stay tuned for future updates, as specific tutorials for this plugin may be developed. FAIRmat Tutorial 13: NOMAD for Experimental Data Management in Synthesis FAIRmat Tutorial 12: Getting started with NOMAD and NOMAD Oasis for research data management (RDM) FAIRmat Tutorial 8: Using NOMAD as an Electronic lab notebook (ELN) for FAIR data","title":"Tutorials"}]}